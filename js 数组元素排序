

var im = im_price.sort(function(a,b){return a-b});
var ex = ex_price.sort(function(a,b){return a-b});
console.log(im);
console.log(ex);
/****************JS 数组相减  不排除重复**************************/*
var arr1 = ["", "120", "125", "125", "130", "130", "130", "130", "130"];
var arr2 = ["", "120", "125", "130"];
for (var i = arr1.length - 1; i >= 0; i--) {
    a = arr1[i];
    for (var j = arr2.length - 1; j >= 0; j--) {
        b = arr2[j];
        if (a == b) {
            arr1.splice(i, 1);
            arr2.splice(j, 1);
            break;
        }
    }
}
console.log(arr1);  // ["125","130","130","130","130"]

//冒泡排序算法
function sort_arr(arr) {
	for (var i = 0;i<arr.length;i++) {
		for (var j = 0; j < arr.length-i-1; j++) {
			if (arr[j]>arr[j+1]) { //从小到大排序sort_arr
				var temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}
	return arr;
}

function qc(a) { // 去重
    var r = [];
    for(var i = 0; i < a.length; i ++) {
        var flag = true;
        var temp = a[i];
        for(var j = 0; j < r.length; j ++) {
            if(temp === r[j]) {
                flag = false;
                break;
            }
        }
        if(flag) {
            r.push(temp);
        }
    }
    return r;
}
function jj(a, b) { // 交集
    var result = [];
    for(var i = 0; i < b.length; i ++) {
        var temp = b[i];
        for(var j = 0; j < a.length; j ++) {
            if(temp === a[j]) {
                result.push(temp);
                break;
            }
        }
    }
    return qc(result);
}
function bj(a, b) { // 并集
    return qc(a.concat(b));
}
function cj(a, b) { // 差集
    var clone = a.slice(0);
    for(var i = 0; i < b.length; i ++) {
        var temp = b[i];
        for(var j = 0; j < clone.length; j ++) {
            if(temp === clone[j]) {
                clone.splice(j,1);
            }
        }
    }
    return qc(clone);
}



